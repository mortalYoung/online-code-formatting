{"version":3,"sources":["extensions/formatter/statusBar.tsx","extensions/formatter/common.ts","extensions/formatter/switchLanguage.ts","extensions/formatter/prettier.ts","extensions/formatter/index.tsx","extensions/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LanguageType","connect","molecule","editor","current","language","tab","data","title","toUpperCase","GotoGithub","type","onClick","window","open","GotoMolecule","BuiltInLanguages","sourceEditor","id","name","closable","formattedEditor","getGroupEditors","a","Promise","resolve","setTimeout","getGroupById","editorInstance","formattingEditor","updateLanguage","languageId","toLowerCase","MonacoEditor","setModelLanguage","getModel","updateTab","Object","assign","SwitchLanguageAction","ID","label","LABEL","alias","precondition","undefined","f1","keybinding","weight","KeybindingWeight","WorkbenchContrib","when","primary","KeyChord","KeyMod","CtrlCmd","KeyCode","KeyL","accessor","quickPick","get","IQuickInputService","createQuickPick","items","map","placeholder","activeLanguage","getState","activeItems","canSelectMany","onDidAccept","i","item","hide","show","Action2","prettify","code","JSON","stringify","parse","formatXML","formatSQL","uppercase","indent","linesBetweenQueries","prettier","format","parser","plugins","parserMarkdown","handleEvents","onDidChangeModelContent","value","getValue","getLanguageId","formatting","e","setValue","updateOptions","readOnly","statusBar","extension","executeCommand","FormatterExtension","activate","layout","toggleMenuBarVisibility","togglePanelVisibility","toggleSidebarVisibility","toggleActivityBarVisibility","add","render","Float","left","right","colorTheme","setTheme","registerAction","dispose","customExtensions","App","extensions","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5dc3532d.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from '@dtinsight/molecule/esm/react';\nimport { IEditor } from '@dtinsight/molecule/esm/model';\nimport molecule from '@dtinsight/molecule';\nimport { Icon } from '@dtinsight/molecule/esm/components';\n\nexport const LanguageType = connect(molecule.editor, function ({ current }: IEditor) {\n    const language: string = current?.tab?.data?.language || 'Unknown';\n    return (\n        <span title='Switch Language'>\n           Language: { language.toUpperCase() }\n        </span>\n    );\n});\n\nexport const GotoGithub = connect(molecule.editor, function ({ current }: IEditor) {\n    return (\n        <Icon type=\"github\" title=\"Open the GitHub repo\" onClick={() => window.open('https://github.com/wewoor/online-code-formatting') }/>\n    );\n});\n\nexport const GotoMolecule = connect(molecule.editor, function ({ current }: IEditor) {\n    return (\n        <span>\n           Powered By <span onClick={() => window.open('https://github.com/DTStack/molecule') }>Molecule</span>\n        </span>\n    );\n});\n","import molecule from \"@dtinsight/molecule\";\nimport { editor as MonacoEditor } from \"@dtinsight/molecule/esm/monaco\";\nimport { IEditorTab } from \"@dtinsight/molecule/esm/model\";\n\nexport const BuiltInLanguages = ['JSON', 'XML', 'SQL', 'Markdown'];\n\nexport const leftGroupPane = 1;\nexport const rightGroupPane = 2;\nexport const sourceEditor: IEditorTab = {\n    id: '1',\n    name: 'Source',\n    closable: false,\n    data: {\n        language: 'json',\n    },\n};\n\nexport const formattedEditor: IEditorTab =  {\n    id: '2',\n    closable: false,\n    name: 'Formatted',\n    data: {\n        language: 'json',\n    },\n}\n\nexport async function getGroupEditors(): Promise<MonacoEditor.IStandaloneCodeEditor[]> {\n    const editor = await new Promise<MonacoEditor.IStandaloneCodeEditor>(\n        (resolve) => {\n            setTimeout(() => {\n                resolve(molecule.editor.getGroupById(leftGroupPane)?.editorInstance);\n            });\n        }\n    );\n    const formattingEditor = await new Promise<MonacoEditor.IStandaloneCodeEditor>(\n        (resolve) => {\n            setTimeout(() => {\n                resolve(molecule.editor.getGroupById(rightGroupPane)?.editorInstance);\n            });\n        }\n    );\n\n    return [editor, formattingEditor];\n}\n\nexport async function updateLanguage(language: string) {\n    const [ editor, formattingEditor ] = await getGroupEditors();\n    const languageId = language.toLowerCase();\n    MonacoEditor.setModelLanguage(editor.getModel()!, languageId);\n    MonacoEditor.setModelLanguage(formattingEditor.getModel()!, languageId);\n\n    molecule.editor.updateTab(Object.assign({}, sourceEditor, { data: { language: languageId } }), leftGroupPane);\n    molecule.editor.updateTab(Object.assign({}, formattedEditor, { data: { language: languageId } }), rightGroupPane);\n}","import {\n    Action2,\n    KeybindingWeight,\n} from '@dtinsight/molecule/esm/monaco/common';\nimport { KeyCode, KeyMod } from '@dtinsight/molecule/esm/monaco';\nimport {\n    IQuickInputService,\n    //@ts-ignore\n} from 'monaco-editor/esm/vs/platform/quickinput/common/quickInput';\n//@ts-ignore\nimport { KeyChord } from 'monaco-editor/esm/vs/base/common/keyCodes';\n\nimport { \n    updateLanguage, BuiltInLanguages,\n} from './common';\nimport molecule from '@dtinsight/molecule';\n\nexport class SwitchLanguageAction extends Action2 {\n    static readonly ID = 'SwitchLanguageAction';\n    static readonly LABEL = 'Select a language';\n\n    constructor() {\n        super({\n            id: SwitchLanguageAction.ID,\n            label: SwitchLanguageAction.LABEL,\n            title: SwitchLanguageAction.LABEL,\n            alias: SwitchLanguageAction.LABEL,\n            precondition: undefined,\n            f1: true, // Whether show the QuickOpenFile in Command Palette\n            keybinding: {\n                // Keybinding\n                weight: KeybindingWeight.WorkbenchContrib,\n                when: undefined,\n                primary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyL),\n            },\n        });\n    }\n\n    run(accessor: any, ...args: any[]) {\n        const quickInputService = accessor.get(IQuickInputService); // Get the quickInput\n\n        const quickPick = quickInputService.createQuickPick();\n        quickPick.items = BuiltInLanguages.map((language) => ({ label: language }));\n        quickPick.placeholder = SwitchLanguageAction.LABEL;\n        const activeLanguage: string = molecule.editor.getState()?.current?.tab?.data.language;\n\n        quickPick.activeItems = [{ label: activeLanguage }];\n        quickPick.canSelectMany = false;\n\n        quickPick.onDidAccept(async (i: any) => {\n            const item = quickPick.activeItems[0];\n            if (item) {\n                updateLanguage(item.label);\n            }\n            quickPick.hide();\n        });\n        quickPick.show();\n    }\n}\n","import { format as formatSQL } from 'sql-formatter';\nimport formatXML from 'xml-formatter';\n\n//@ts-ignore\nimport prettier from 'prettier/esm/standalone.mjs';\n//@ts-ignore\nimport parserMarkdown from 'prettier/esm/parser-markdown.mjs';\n\n// const prettier = require(\"prettier/standalone\");\n// const plugins = [require(\"prettier/parser-graphql\")];\n\n// const md = require('markdown-it')();\n// const mdPrettier = require('markdown-it-prettier');\n// import { fix } from '@lint-md/core';\n// const { formatFromString } = require('@quilicicf/markdown-formatter');\n// const formatMarkdown = md.use(mdPrettier, { singleQuote: true });\n\nexport function prettify(language: string | undefined, code: string): string {\n    switch (language) {\n\n        case 'json': {\n            return JSON.stringify(JSON.parse(code), null, 2);\n        }\n\n        case 'xml': { \n            return formatXML(code);\n        }\n\n        case 'sql': { \n            return formatSQL(code, {\n                uppercase: true,\n                indent: '    ',\n                linesBetweenQueries: 2\n            });\n        }\n\n        case 'markdown': { \n            return prettier.format(code, {\n                parser: \"markdown\",\n                plugins: [parserMarkdown],\n              });;\n        }\n\n        default: {\n            return code;\n        }\n    }\n}\n","import molecule from '@dtinsight/molecule';\nimport { IExtension, Float } from '@dtinsight/molecule/esm/model';\nimport { GotoGithub, GotoMolecule, LanguageType } from './statusBar';\nimport { SwitchLanguageAction } from './switchLanguage';\n\nimport { \n    getGroupEditors, sourceEditor,\n    formattedEditor, leftGroupPane, rightGroupPane \n} from './common';\n\nimport { prettify } from './prettier';\n\nasync function handleEvents() {\n    const [ editor, formattingEditor ] = await getGroupEditors();\n\n    editor.onDidChangeModelContent(() => {\n        const value = editor.getValue();\n        const language = editor.getModel()?.getLanguageId()\n        let formatting = '';\n        try {\n            formatting = prettify(language, value);\n        } catch (e) {\n            formatting = value;\n        }\n        if (formatting && formattingEditor) {\n            formattingEditor.setValue(formatting);\n        }\n    }) as any;\n\n    formattingEditor.updateOptions({ readOnly: true });\n\n    molecule.statusBar.onClick((e, { id }) => {\n        if (id === 'LanguageType') {\n            molecule.extension.executeCommand(SwitchLanguageAction.ID);\n        }\n    });\n}\n\nexport const FormatterExtension: IExtension = {\n    id: 'ExtendDataSync',\n    name: 'Data Sync',\n    activate: async () => {\n        // Hidden the useless Panel\n        molecule.layout.toggleMenuBarVisibility();\n        molecule.layout.togglePanelVisibility();\n        molecule.layout.toggleSidebarVisibility();\n        molecule.layout.toggleActivityBarVisibility();\n\n        molecule.editor.open(sourceEditor, leftGroupPane);\n        molecule.editor.open(formattedEditor, rightGroupPane);\n    \n        molecule.statusBar.add({\n            id: 'LanguageType',\n            render: () => <LanguageType />\n        }, Float.left);\n\n        molecule.statusBar.add({\n            id: 'gotoGithub',\n            render: () => <GotoGithub />\n        }, Float.right);\n\n        molecule.statusBar.add({\n            id: 'gotoMolecule',\n            render: () => <GotoMolecule />\n        }, Float.right);\n\n        // Set the colorTheme\n        molecule.colorTheme.setTheme('GitHub Plus');\n        // Register the actions\n        molecule.extension.registerAction(SwitchLanguageAction);\n    \n        handleEvents();\n    },\n    dispose() {},\n};\n","import { IExtension } from '@dtinsight/molecule/esm/model/extension';\nimport { FormatterExtension } from './formatter';\nexport const customExtensions: IExtension[] = [FormatterExtension];\n","import React from 'react';\nimport { MoleculeProvider, Workbench } from '@dtinsight/molecule';\nimport '@dtinsight/molecule/esm/style/mo.css';\n\nimport './App.css';\n\nimport { customExtensions } from './extensions';\n\nfunction App() {\n  return (\n    <MoleculeProvider extensions={customExtensions}>\n        <Workbench />\n    </MoleculeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}