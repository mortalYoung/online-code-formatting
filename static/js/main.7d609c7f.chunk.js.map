{"version":3,"sources":["extensions/formatter/statusBar.tsx","extensions/formatter/index.tsx","extensions/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LanguageType","connect","molecule","editor","current","language","tab","data","toUpperCase","GotoGithub","type","title","onClick","window","open","sourceEditor","id","name","closable","formattedEditor","FormatterExtension","activate","a","layout","toggleMenuBarVisibility","togglePanelVisibility","toggleSidebarVisibility","toggleActivityBarVisibility","statusBar","add","render","Float","left","right","colorTheme","setTheme","Promise","resolve","setTimeout","getGroupById","editorInstance","formattingEditor","onDidChangeModelContent","value","getValue","formatting","JSON","stringify","parse","e","setValue","dispose","customExtensions","App","extensions","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"8TAMaA,EAAeC,kBAAQC,IAASC,QAAQ,YAAiC,IAAD,IAApBC,EAAoB,EAApBA,QACvDC,GAA0B,OAAPD,QAAO,IAAPA,GAAA,UAAAA,EAASE,WAAT,mBAAcC,YAAd,eAAoBF,WAAY,UACzD,OACI,qDACsBA,EAASG,oBAM1BC,EAAaR,kBAAQC,IAASC,QAAQ,YAAgC,EAApBC,QAC3D,OACI,cAAC,OAAD,CAAMM,KAAK,SAASC,MAAM,uBAAuBC,QAAS,kBAAMC,OAAOC,KAAK,0DCT9EC,EAA2B,CAC7BC,GAAI,IACJC,KAAM,eACNC,UAAU,EACVX,KAAM,CACFF,SAAU,SAIZc,EAA+B,CACjCH,GAAI,IACJE,UAAU,EACVD,KAAM,aACNV,KAAM,CACFF,SAAU,SAILe,EAAiC,CAC1CJ,GAAI,iBACJC,KAAM,YACNI,SAAS,WAAD,4BAAE,8BAAAC,EAAA,6DAENpB,IAASqB,OAAOC,0BAChBtB,IAASqB,OAAOE,wBAChBvB,IAASqB,OAAOG,0BAChBxB,IAASqB,OAAOI,8BAEhBzB,IAASC,OAAOW,KAAKC,EA/BP,GAgCdb,IAASC,OAAOW,KAAKK,EA/BN,GAiCfjB,IAAS0B,UAAUC,IAAI,CACnBb,GAAI,eACJc,OAAQ,kBAAM,cAAC9B,EAAD,MACf+B,QAAMC,MAER9B,IAAS0B,UAAUC,IAAI,CACpBb,GAAI,aACJc,OAAQ,kBAAM,cAACrB,EAAD,MACfsB,QAAME,OAGT/B,IAASgC,WAAWC,SAAS,eArBvB,UAuBe,IAAIC,SACrB,SAACC,GACGC,YAAW,WAAO,IAAD,EACbD,EAAO,UAACnC,IAASC,OAAOoC,aAlDtB,UAkDK,aAAC,EAA6CC,sBA1B3D,eAuBArC,EAvBA,iBA8ByB,IAAIiC,SAC/B,SAACC,GACGC,YAAW,WAAO,IAAD,EACbD,EAAO,UAACnC,IAASC,OAAOoC,aAxDrB,UAwDI,aAAC,EAA8CC,sBAjC5D,QA8BAC,EA9BA,OAsCNtC,EAAOuC,yBAAwB,WAC3B,IAAMC,EAAQxC,EAAOyC,WACjBC,EAAa,GAEjB,IACIA,EAAaC,KAAKC,UAAUD,KAAKE,MAAML,GAAQ,KAAM,GACvD,MAAOM,GACLJ,EAAaF,EAEjBF,EAAiBS,SAASL,MA/CxB,4CAAF,kDAAC,GAkDTM,QArD0C,cCzBjCC,EAAiC,CAAChC,GCchCiC,MARf,WACE,OACE,cAAC,IAAD,CAAkBC,WAAYF,EAA9B,SACI,cAAC,IAAD,OCGOG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASlC,OACP,cAAC,IAAMmC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7d609c7f.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from '@dtinsight/molecule/esm/react';\nimport { IEditor } from '@dtinsight/molecule/esm/model';\nimport molecule from '@dtinsight/molecule';\nimport { Icon } from '@dtinsight/molecule/esm/components';\n\nexport const LanguageType = connect(molecule.editor, function ({ current }: IEditor) {\n    const language: string = current?.tab?.data?.language || 'Unknown';\n    return (\n        <span>\n           Source Language: { language.toUpperCase() }\n        </span>\n    );\n});\n\n\nexport const GotoGithub = connect(molecule.editor, function ({ current }: IEditor) {\n    return (\n        <Icon type=\"github\" title=\"Open the GitHub repo\" onClick={() => window.open('https://github.com/wewoor/online-code-formatting') }/>\n    );\n});\n","import molecule from '@dtinsight/molecule';\nimport { Float, IEditorTab } from '@dtinsight/molecule/esm/model';\nimport { IExtension } from '@dtinsight/molecule/esm/model/extension';\nimport { editor as MonacoEditor } from '@dtinsight/molecule/esm/monaco';\nimport { GotoGithub, LanguageType } from './statusBar';\n\nconst leftGroupPane = 1;\nconst rightGroupPane = 2;\n\nconst sourceEditor: IEditorTab = {\n    id: '1',\n    name: 'Source Code ',\n    closable: false,\n    data: {\n        language: 'json',\n    },\n};\n\nconst formattedEditor: IEditorTab =  {\n    id: '2',\n    closable: false,\n    name: 'Formatted ',\n    data: {\n        language: 'json',\n    },\n}\n\nexport const FormatterExtension: IExtension = {\n    id: 'ExtendDataSync',\n    name: 'Data Sync',\n    activate: async () => {\n        // Hidden the useless Panel\n        molecule.layout.toggleMenuBarVisibility();\n        molecule.layout.togglePanelVisibility();\n        molecule.layout.toggleSidebarVisibility();\n        molecule.layout.toggleActivityBarVisibility();\n\n        molecule.editor.open(sourceEditor, leftGroupPane);\n        molecule.editor.open(formattedEditor, rightGroupPane);\n    \n        molecule.statusBar.add({\n            id: 'LanguageType',\n            render: () => <LanguageType />\n        }, Float.left);\n\n         molecule.statusBar.add({\n            id: 'gotoGithub',\n            render: () => <GotoGithub />\n        }, Float.right);\n\n        // Set the colorTheme\n        molecule.colorTheme.setTheme('GitHub Plus');\n    \n        const editor = await new Promise<MonacoEditor.IStandaloneCodeEditor>(\n            (resolve) => {\n                setTimeout(() => {\n                    resolve(molecule.editor.getGroupById(leftGroupPane)?.editorInstance);\n                });\n            }\n        );\n        const formattingEditor = await new Promise<MonacoEditor.IStandaloneCodeEditor>(\n            (resolve) => {\n                setTimeout(() => {\n                    resolve(molecule.editor.getGroupById(rightGroupPane)?.editorInstance);\n                });\n            }\n        );\n\n        editor.onDidChangeModelContent(() => {\n            const value = editor.getValue();\n            let formatting = '';\n\n            try {\n                formatting = JSON.stringify(JSON.parse(value), null, 2);\n            } catch (e) {\n                formatting = value;\n            }\n            formattingEditor.setValue(formatting);\n        }) as any;\n    },\n    dispose() {},\n};\n","import { IExtension } from '@dtinsight/molecule/esm/model/extension';\nimport { FormatterExtension } from './formatter';\nexport const customExtensions: IExtension[] = [FormatterExtension];\n","import React from 'react';\nimport { MoleculeProvider, Workbench } from '@dtinsight/molecule';\nimport '@dtinsight/molecule/esm/style/mo.css';\n\nimport './App.css';\n\nimport { customExtensions } from './extensions';\n\nfunction App() {\n  return (\n    <MoleculeProvider extensions={customExtensions}>\n        <Workbench />\n    </MoleculeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}